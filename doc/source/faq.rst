Frequently Asked Questions (FAQ)
********************************************************************************


How to report bugs and request support?
################################################################################

It is recomended to report issues using GITLAB issue tracking system which can be found here: https://gitlab.cern.ch/skulis/tmrg/issues.

A good bug report contains a minimal, complete, and verifiable code example that demonstrates the problem you are running into. Complete means not just a code snippet, but an entire top verilog module that can be synthesized. Also include all the parameters and/or configuration files. It should be possible to reproduce the problem you are seeing within seconds using the information you provided! Every file of line of code someone trying to reproduce your problem has to write themselves will increase the effort someone has to put into reproducing your problem and at the same time will decrease the chances of your problem being reproduced correctly!

You may also use build in report generator:

.. code-block:: bash
   :linenos:

   # tmrg --generate-report [other options]


Always consider that someone reading your bug report only has the information you provided. Before clicking the send button on your bug report and/or support request, double check that you have provided all the information necessary to easily and quickly reproduce the problem you are seeing.



TMRG does not create nice parsing errors 
################################################################################

That is right, the parser used for the TMRG tool can report errors which are not really meaning full and can point to the wrong location in the source code. The focus so far for development of the TMRG was on triplication features and processing valid input, not good error reporting for invalid code. It can happen, that in some cases it will even accept invalid code! You are advised to make sure that the code which you input to the tmrg tool is valid verilog code. Please use your simulator and/or synthesis tool first (iverilog, irun, rc, gennus, ...).

You should always simulate your designs first before going to triplication!



How to checkout old version of the TMRG tool ?
################################################################################

Lets assume that the TMRG tool was doing a good job in triplicating your design
but after last update something broke. What should I do ? 

  1) Please let us know about it!
  2) go to your old triplicated file, in the header you shold find an information 
     about version of TMRG which was used at the time:

     .. code-block:: C
        :linenos:

        /****************************************************************************************************
         *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
         *                                   ! DO NOT EDIT IT MANUALLY !                                    *
         *                                                                                                  *
         * file    : ./forLoopTMR.v                                                                         *
         *                                                                                                  *
         * user    : skulis                                                                                 *
         * host    : pcmic313                                                                               *
         * date    : 05/05/2017 08:46:43                                                                    *
         *                                                                                                  *
         * workdir : /home/skulis/projects/tmrg                                                             *
         * cmd     : /home/skulis/projects/tmrg/bin/tmrg tests/verilog/forLoop.v                            *
         * tmrg rev: f14fa574b0ea8b754680e9eef412d49c1409fdc5                                               *
         *                                                                                                  *
         * src file: tests/verilog/forLoop.v                                                                *
         *           File is NOT under version control!                                                     *
         *           Modification time : 2017-04-24 17:26:49.849797                                         *
         *           File Size         : 1408                                                               *
         *           MD5 hash          : 3148e4b33dc6c4e2a0dfac098cd29740                                   *
         *                                                                                                  *
         ****************************************************************************************************/

  3) Please extract SHA1 mentioned in tmrg rev (line 13)
  4) Clone a new repository as described in :ref:`installation`
  5) checkout the required SHA1:

     .. code-block:: bash
        :linenos:

        # git checkout f14fa574b0ea8b754680e9eef412d49c1409fdc5 


Is System verilog supported?
################################################################################

Short answer is **NO**, and there is no short feature plan to add it. 
However, some of the language features are recognized and processed properly. 


I'm writing a paper, how can I refer to the TMRG tool ?
################################################################################

In papers and reports, please refer to TMRG as follows: 

.. code-block:: tex

   @article{TMRG,
     author={S. Kulis},
     title={Single Event Effects mitigation with TMRG tool},
     journal={Journal of Instrumentation},
     volume={12},
     number={01},
     pages={C01082},
     url={http://stacks.iop.org/1748-0221/12/i=01/a=C01082},
     year={2017},
     abstract={Single Event Effects (SEE) are a major concern for integrated
       circuits exposed to radiation. There have been several techniques
       proposed to protect circuits against radiation-induced upsets. Among the
       others, the Triple Modular Redundancy (TMR) technique is one of the most
       popular. The purpose of the Triple Modular Redundancy Generator (TMRG)
       tool is to automatize the process of triplicating digital circuits
       freeing the designer from introducing the TMR code manually at the
       implementation stage. It helps to ensure that triplicated logic is
       maintained through the design process. Finally, the tool streamlines the
       process of introducing SEE in gate level simulations for final
       verification.}
   }


Do you have a docker for the TMRG?
################################################################################

Yes, we do. Please check: https://gitlab.cern.ch/skulis/tmrg/container_registry.
Or just use the latest one:

.. code-block:: bash
   :linenos:

   # docker pull gitlab-registry.cern.ch/skulis/tmrg:latest

This docker is used for the continues integration testing.


How do I input multiple files to tmrg?
################################################################################

Using command line arguments you can use:

.. code-block:: bash
   :linenos:

   # tmrg file1.v file2.v file3.v

If you are using configuration file (an example can be found in ``tmrg/etc/tmrg.cfg``), 
you should add your files to the variable ``files`` in section ``tmrg``:

.. code-block:: ini
   :linenos:

   [tmrg]
   files = file1.v file2.v file3.v


How do I redirect output from the tmrg to another directory?
################################################################################

Using command line arguments you can use:

.. code-block:: bash
   :linenos:

   # tmrg --tmr-dir "output" [other options]

If you are using configuration file (an example can be found in ``tmrg/etc/tmrg.cfg``), 
you should define your output directory using the variable ``tmr_dir`` in section ``tmrg``:

.. code-block:: ini
   :linenos:

   [tmrg]
   tmr_dir = output



How do I increase verbosity level of the tmrg?
################################################################################

Please use ``-v`` option (or multiplicity of it):

.. code-block:: bash
   :linenos:

   # tmrg -v [other options]
   # tmrg -vv [other options]
   # tmrg -vvv [other options]

