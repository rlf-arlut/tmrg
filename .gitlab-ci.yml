stages:
  - test
  - doc_build
  - doc_deploy
  - release

.regression_template: &regression
  stage: test
  script:
    - source test/create_venv.sh
    - source venv/bin/activate
    - python -m pytest -v
  artifacts:
    reports:
      junit: pytest.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

regression_ubuntu18_python2:
  image: gitlab-registry.cern.ch/tmrg/tmrg/tmrg_ubuntu18
  <<: *regression

regression_ubuntu20_python3:
  image: gitlab-registry.cern.ch/tmrg/tmrg/tmrg_ubuntu20
  <<: *regression

doc_build_not_master:
   stage: doc_build
   image: gitlab-registry.cern.ch/tmrg/tmrg/tmrg_doc
   script:
        - cd doc
        - make latexpdf
        - make html
   except:
        - master

doc_build_master:
   stage: doc_build
   image: gitlab-registry.cern.ch/tmrg/tmrg/tmrg_doc
   script:
        - cd doc
        - make latexpdf
        - make html
        - mv build/html/ ../public
        - mv build/latex/tmrg.pdf ../public
        - cd ../
        - ./tmrg/release.py
        - mv tmrg.tgz public/
   artifacts:
     paths:
       - public
     expire_in: 1 hour
   only:
     - master

deployment:
  stage: doc_deploy
  only:
    - master
  image: gitlab-registry.cern.ch/ci-tools/ci-web-deployer:latest
  script:
  - deploy-eos
  before_script: []
  after_script: []

# coverage regexp : ^\[INFO\s+\]\s+\|\s+\TOTAL\s+\d+\s+\d+\s+(\d+\%)

# NOTE: SUPER_SECRET_TOKEN needs to be set as CI variable (**NOT PROTECTED** but **MASKED**)
release:
  image: gitlab-registry.cern.ch/tmrg/tmrg/pylint
  stage: release
  when: manual
  allow_failure: true
  tags:
    - docker
  only:
    - tags
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /\[.*skip[ -]release.*\]/
  script:
    - python3 ci_scripts/release/create_release.py --changelog CHANGELOG.md --project_id $CI_PROJECT_ID --private_token $SUPER_SECRET_TOKEN --tag_name $CI_COMMIT_REF_NAME
